# {{{ imports

snippet im "import"
import $1 from '$2'
endsnippet

snippet imreact "import react"
import React from 'react'
endsnippet

snippet imclassnames "import classnames"
import classNames from 'classnames'
endsnippet

# }}}
# {{{ lodash

snippet im_includes "import lodash _includes"
import _includes from 'lodash/includes'
endsnippet

snippet im_keys "import lodash _keys"
import _keys from 'lodash/keys'
endsnippet

snippet im_values "import lodash _values"
import _values from 'lodash/values'
endsnippet

snippet im_flatten "import lodash _flatten"
import _flatten from 'lodash/flatten'
endsnippet

snippet im_uniq "import lodash _uniq"
import _uniq from 'lodash/uniq'
endsnippet

snippet im_isEmpty "import lodash _isEmpty"
import _isEmpty from 'lodash/isEmpty'
endsnippet

snippet im_isObject "import lodash _isObject"
import _isObject from 'lodash/isObject'
endsnippet

snippet im_isArray "import lodash _isArray"
import _isArray from 'lodash/isArray'
endsnippet

snippet im_isFinite "import lodash _isFinite"
import _isFinite from 'lodash/isFinite'
endsnippet

snippet im_isFunction "import lodash _isFunction"
import _isFunction from 'lodash/isFunction'
endsnippet

snippet im_uniqBy "import lodash _uniqBy"
import _uniqBy from 'lodash/uniqBy'
endsnippet

snippet im_compact "import lodash _compact"
import _compact from 'lodash/compact'
endsnippet

snippet im_sum "import lodash _sum"
import _sum from 'lodash/sum'
endsnippet

snippet im_min "import lodash _min"
import _min from 'lodash/min'
endsnippet

snippet im_max "import lodash _max"
import _max from 'lodash/max'
endsnippet

snippet im_chunk "import lodash _chunk"
import _chunk from 'lodash/chunk'
endsnippet

# }}}
# {{{ general 

snippet exp "export"
export $1
$0
endsnippet

snippet exdef "export default"
export default $1
$0
endsnippet

snippet exob "export { ... }"
export { $1 }
$0
endsnippet

snippet ret "return"
return $1
endsnippet

snippet genfunc "generator function"
function* ${1:name}($2) {
	$0
}
endsnippet

snippet afunc "anonymous function"
const ${1:name} = ($2): $3 => {
	${0:${VISUAL}}
}
endsnippet

snippet if "if statement"
if ($1) {
	$0
}
endsnippet

snippet for "for loop"
for (let ${1:i} = ${2:0}; $3, ${4:i += 1}) {
	${0:${VISUAL}}
}
endsnippet

# }}}
# {{{ tests

snippet desc "describe"
describe('$1', () => {
	$0
})
endsnippet

snippet it "it"
it('$1', () => {
	$0
})
endsnippet

snippet ita "it"
it('$1', async () => {
	$0
})
endsnippet

snippet expe "expect"
expect($1).$2
endsnippet

snippet expetext "expect(...).toHaveTextContent(...)"
expect($1).toHaveTextContent('$2')
$0
endsnippet

snippet expeeq "expect(...).toEqual(...)"
expect($1).toEqual($2)
$0
endsnippet

snippet expedef "expect(...).toBeDefined()"
expect($1).toBeDefined()
$0
endsnippet

snippet expesnap "expect(...).toMatchSnapshot()"
expect($1).toMatchSnapshot()
$0
endsnippet

# }}}
# {{{ common imports

snippet imU "import * as U from 'utils'"
import * as U from 'utils'
$0
endsnippet

# }}}
# {{{ react

snippet useMemo "useMemo(...)"
const $1 = useMemo(() => {
	$2
}, $3)
$0
endsnippet

# }}}
# {{{ destructuring

snippet cdo "const { ... } = ..."
const { $1 } = $2
$0
endsnippet

snippet cda "const [ ... ] = ..."
const [ $1 ] = $2
$0
endsnippet

snippet ldo "let { ... } = ..."
let { $1 } = $2
$0
endsnippet

snippet lda "let [ ... ] = ..."
let [ $1 ] = $2
$0
endsnippet

# }}}

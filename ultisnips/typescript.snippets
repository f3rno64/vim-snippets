# {{{ imports and exports

# {{{ export

snippet exp "export"
export $1
$0
endsnippet

# }}}
# {{{ export default

snippet exdef "export default"
export default $1
$0
endsnippet

# }}}
# {{{ export {... }

snippet exob "export { ... }"
export { $1 }
$0
endsnippet

# }}}
# {{{ import

snippet im "import"
import $1 from '$2'
endsnippet

# }}}
# {{{ import react

snippet imreact "import react"
import React from 'react'
endsnippet

# }}}
# {{{ import import classnames

snippet imclassnames "import classnames"
import classNames from 'classnames'
endsnippet

# }}}
# {{{ import U from utils

snippet imU "import * as U from 'utils'"
import * as U from 'utils'
$0
endsnippet

# }}}

# }}}
# {{{ lodash

# {{{ import _includes

snippet im_in "import _includes"
import _includes from 'lodash/includes'
endsnippet

# }}}
# {{{ import _keys

snippet im_k "import _keys"
import _keys from 'lodash/keys'
endsnippet

# }}}
# {{{ import _values

snippet im_v "import _values"
import _values from 'lodash/values'
endsnippet

# }}}
# {{{ import _flatten

snippet im_fl "import _flatten"
import _flatten from 'lodash/flatten'
endsnippet

# }}}
# {{{ import _uniq

snippet im_un "import _uniq"
import _uniq from 'lodash/uniq'
endsnippet

# }}}
# {{{ import _isUndefined

snippet im_isud "import _isUndefined"
import _isUndefined from 'lodash/isUndefined'
endsnippet

# }}}
# {{{ import _isNil

snippet im_isni "import _isNil"
import _isNil from 'lodash/isNil'
endsnippet

# }}}
# {{{ import _isNull

snippet im_isnl "import _isNull"
import _isNull from 'lodash/isNull'
endsnippet

# }}}
# {{{ import _isEqual

snippet im_iseq "import _isEqual"
import _isEqual from 'lodash/isEqual'
endsnippet

# }}}
# {{{ import _isEmpty

snippet im_ise "import _isEmpty"
import _isEmpty from 'lodash/isEmpty'
endsnippet

# }}}
# {{{ import _isObject

snippet im_iso "import _isObject"
import _isObject from 'lodash/isObject'
endsnippet

# }}}
# {{{ import _isString

snippet im_iss "import _isString"
import _isString from 'lodash/isString'
endsnippet

# }}}
# {{{ import _isError

snippet im_iser "import _isError"
import _isError from 'lodash/isError'
endsnippet

# }}}
# {{{ import _isDate

snippet im_isd "import _isDate"
import _isDate from 'lodash/isDate'
endsnippet

# }}}
# {{{ import _isBoolean

snippet im_isb "import _isBoolean"
import _isBoolean from 'lodash/isBoolean'
endsnippet

# }}}
# {{{ import _isNumber

snippet im_isn "import _isNumber"
import _isNumber from 'lodash/isNumber'
endsnippet

# }}}
# {{{ import _isArray

snippet im_isa "import _isArray"
import _isArray from 'lodash/isArray'
endsnippet

# }}}
# {{{ import _isFinite

snippet im_isfi "import _isFinite"
import _isFinite from 'lodash/isFinite'
endsnippet

# }}}
# {{{ import _isFunction

snippet im_isfu "import _isFunction"
import _isFunction from 'lodash/isFunction'
endsnippet

# }}}
# {{{ import _uniqBy

snippet im_unb "import _uniqBy"
import _uniqBy from 'lodash/uniqBy'
endsnippet

# }}}
# {{{ import _compact

snippet im_co "import _compact"
import _compact from 'lodash/compact'
endsnippet

# }}}
# {{{ import _sum

snippet im_s "import _sum"
import _sum from 'lodash/sum'
endsnippet

# }}}
# {{{ import _min

snippet im_mi "import _min"
import _min from 'lodash/min'
endsnippet

# }}}
# {{{ import _max

snippet im_ma "import _max"
import _max from 'lodash/max'
endsnippet

# }}}
# {{{ import _chunk

snippet im_ch "import _chunk"
import _chunk from 'lodash/chunk'
endsnippet

# }}}

# {{{ _includes

snippet _in "_includes"
const $1 = _includes($1)$0
endsnippet

# }}}
# {{{ _keys

snippet _k "_keys"
const $1 = _keys($1)$0
endsnippet

# }}}
# {{{ _values

snippet _v "_values"
const $1 = _values($1)$0
endsnippet

# }}}
# {{{ _flatten

snippet _fl "_flatten"
const $1 = _flatten($2)$0
endsnippet

# }}}
# {{{ _uniq

snippet _un "_uniq"
const $1 = _uniq($2)$0
endsnippet

# }}}
# {{{ _isUndefined

snippet _isud "_isUndefined"
const $1 = _isUndefined($2)$0
endsnippet

# }}}
# {{{ _isNil

snippet _isni "const ... = _isNil(...)"
const $1 = _isNil($2)$0
endsnippet

# }}}
# {{{ _isNull

snippet _isnl "const ... = _isNull(...)"
const $1 = _isNull($2)$0
endsnippet

# }}}
# {{{ _isEqual

snippet _iseq "const ... = _isEqual(...)"
const $1 = _isEqual($2)$0
endsnippet

# }}}
# {{{ _isEmpty

snippet _ise "const ... = _isEmpty(...)"
const $1 = _isEmpty($2)$0
endsnippet

# }}}
# {{{ _isObject

snippet _iso "const ... = _isObject(...)"
const $1 = _isObject($2)$0
endsnippet

# }}}
# {{{ _isString

snippet _iss "const ... = _isString(...)"
const $1 = _isString($2)$0
endsnippet

# }}}
# {{{ _isError

snippet _iser "const ... = _isError(...)"
const $1 = _isError($2)$0
endsnippet

# }}}
# {{{ _isDate

snippet _isd "const ... = _isDate(...)"
const $1 = _isDate($2)$0
endsnippet

# }}}
# {{{ _isBoolean

snippet _isb "const ... = _isBoolean(...)"
const $1 = _isBoolean($2)$0
endsnippet

# }}}
# {{{ _isNumber

snippet _isn "const ... = _isNumber(...)"
const $1 = _isNumber($2)$0
endsnippet

# }}}
# {{{ _isArray

snippet _isa "const ... = _isArray(...)"
const $1 = _isArray($2)$0
endsnippet

# }}}
# {{{ _isFinite

snippet _isfi "const ... = _isFinite(...)"
const $1 = _isFinite($2)$0
endsnippet

# }}}
# {{{ _isFunction

snippet _isfu "const ... = _isFunction(...)"
const $1 = _isFunction($2)$0
endsnippet

# }}}
# {{{ _uniqBy

snippet _unb "const ... = _uniqBy(...)"
const $1 = _uniqBy($2)$0
endsnippet

# }}}
# {{{ _compact

snippet _co "const ... = _compact(...)"
const $1 = _compact($2)$0
endsnippet

# }}}
# {{{ _sum

snippet _s "const ... = _sum(...)"
const $1 = _sum($2)$0
endsnippet

# }}}
# {{{ _min

snippet _mi "const ... = _min(...)"
const $1 = _min($2)$0
endsnippet

# }}}
# {{{ _max

snippet _ma "const ... = _max(...)"
const $1 = _max($2)$0
endsnippet

# }}}
# {{{ _chunk

snippet _ch "const ... = _chunk(...)"
const $1 = _chunk($2)$0
endsnippet

# }}}

# }}}
# {{{ general

# {{{ console.log

snippet clo "console.log"
console.log($1)
$0
endsnippet

# }}}
# {{{ console.error

snippet cle "console.error"
console.error($1)
$0
endsnippet

# }}}
# {{{ return

snippet ret "return"
return $1
endsnippet

# }}}
# {{{ generator function

snippet gfu "generator function"
function* ${1:name}($2) {
	$0
}
endsnippet

# }}}
# {{{ anonymous function

snippet afu "anonymous function"
const ${1:name} = ($2): $3 => {
	${0:${VISUAL}}
}
endsnippet

# }}}
# {{{ if statement

snippet if "if statement"
if ($1) {
	$0
}
endsnippet

# }}}
# {{{ else statement

snippet el "else"
} else {
	$0
}
endsnippet

# }}}
# {{{ else if statement

snippet elif "else if"
} else if ($1) {
	$0
}
endsnippet

# }}}
# {{{ for loop

snippet for "for loop"
for (let ${1:i} = ${2:0}; $3, ${4:i += 1}) {
	${0:${VISUAL}}
}
endsnippet

# }}}

# }}}
# {{{ tests

# {{{ describe

snippet desc "describe"
describe('$1', () => {
	$0
})
endsnippet

# }}}
# {{{ it

snippet it "it"
it('$1', () => {
	$0
})
endsnippet

# }}}
# {{{ it async

snippet ita "it"
it('$1', async () => {
	$0
})
endsnippet

# }}}
# {{{ expect

snippet expe "expect"
expect($1).$2
endsnippet

# }}}
# {{{ expect.toHaveTextContent

snippet expetext "expect(...).toHaveTextContent(...)"
expect($1).toHaveTextContent('$2')
$0
endsnippet

# }}}
# {{{ expect.toEqual

snippet expeeq "expect(...).toEqual(...)"
expect($1).toEqual($2)
$0
endsnippet

# }}}
# {{{ expect.toBeDefined

snippet expedef "expect(...).toBeDefined()"
expect($1).toBeDefined()
$0
endsnippet


# }}}
# {{{ expect.toMatchSnapshot

snippet expesnap "expect(...).toMatchSnapshot()"
expect($1).toMatchSnapshot()
$0
endsnippet

# }}}

# }}}
# {{{ destructuring

# {{{ const {... } = ...}

snippet c{ "const { ... } = ..."
const { $1 } = $2
$0
endsnippet

# }}}
# {{{ const [... ] = ...

snippet c[ "const [ ... ] = ..."
const [ $1 ] = $2
$0
endsnippet

# }}}
# {{{ let { ... } = ...}

snippet l{ "let { ... } = ..."
let { $1 } = $2
$0
endsnippet

# }}}
# {{{ let [... ] = ...

snippet l[ "let [ ... ] = ..."
let [ $1 ] = $2
$0
endsnippet

# }}}

# }}}
